USE PROJECT;

SELECT * FROM FACTSALES;

DESC PROJECT.FACTSALES;

-- CREATE A NEW COLUMN AND STORED FORMATTED ORDER DATE
ALTER TABLE 
  PROJECT.FACTSALES 
ADD 
  COLUMN FORMATTED_ORDER_DATE DATE;

UPDATE 
  PROJECT.FACTSALES 
SET 
  FORMATTED_ORDER_DATE = DATE_ADD(
    '1899-12-30', INTERVAL ORDER_DATE DAY
  );

SELECT FORMATTED_ORDER_DATE 
		FROM FACTSALES LIMIT 2;


-- HANDLING MISSING/ NULL VALUES

SELECT 

    SUM(CASE WHEN ROW_ID IS NULL THEN 1 ELSE 0 END) AS MISSING_ROWID,
    SUM(CASE WHEN ORDER_PRIORITY IS NULL THEN 1 ELSE 0 END) AS MISSING_ORDER_PRIORITY,
    SUM(CASE WHEN DISCOUNT IS NULL THEN 1 ELSE 0 END) AS MISSING_DISCOUNT,
    SUM(CASE WHEN UNIT_PRICE IS NULL THEN 1 ELSE 0 END) AS MISSING_UNITPRICE,
    SUM(CASE WHEN SHIPPING_COST IS NULL THEN 1 ELSE 0 END) AS MISSING_SHIPPINGCOST,
    SUM(CASE WHEN CUSTOMER_ID IS NULL THEN 1 ELSE 0 END) AS MISSING_CUSTOMERID,
    SUM(CASE WHEN CUSTOMER_NAME IS NULL THEN 1 ELSE 0 END) AS MISSING_CUSTOMERNAME,
    SUM(CASE WHEN SHIP_MODE IS NULL THEN 1 ELSE 0 END) AS MISSING_SHIPMODE,
    SUM(CASE WHEN CUSTOMER_SEGMENT IS NULL THEN 1 ELSE 0 END) AS MISSING_CUSEGEMENTATION,
    SUM(CASE WHEN PRODUCT_CATEGORY IS NULL THEN 1 ELSE 0 END) AS MISSING_PROCATEGORY,
    SUM(CASE WHEN PRODUCT_SUB_CATEGORY IS NULL THEN 1 ELSE 0 END) AS MISSING_PROSUBCATEGORY,
    SUM(CASE WHEN PRODUCT_CONTAINER IS NULL THEN 1 ELSE 0 END) AS MISSING_PROCONTAINER,  -- FIXED THIS LINE
    SUM(CASE WHEN PRODUCT_NAME IS NULL THEN 1 ELSE 0 END) AS MISSING_PRODUCTNAME,
    SUM(CASE WHEN PRODUCT_BASE_MARGIN IS NULL THEN 1 ELSE 0 END) AS MISSING_PROBASEMARGIN,
    SUM(CASE WHEN REGION IS NULL THEN 1 ELSE 0 END) AS MISSING_REGION,
    SUM(CASE WHEN MANAGER IS NULL THEN 1 ELSE 0 END) AS MISSING_MANAGER,
    SUM(CASE WHEN STATE_OR_PROVINCE IS NULL THEN 1 ELSE 0 END) AS MISSING_SOP,
    SUM(CASE WHEN CITY IS NULL THEN 1 ELSE 0 END) AS MISSING_CITY,
    SUM(CASE WHEN POSTAL_CODE IS NULL THEN 1 ELSE 0 END) AS MISSING_PC,
    SUM(CASE WHEN SHIP_DATE IS NULL THEN 1 ELSE 0 END) AS MISSING_SHIPD,
    SUM(CASE WHEN PROFIT IS NULL THEN 1 ELSE 0 END) AS MISSING_PROFIT,
    SUM(CASE WHEN QUANTITY_ORDERED_NEW IS NULL THEN 1 ELSE 0 END) AS MISSING_QON,
    SUM(CASE WHEN SALES IS NULL THEN 1 ELSE 0 END) AS MISSING_SALES,
    SUM(CASE WHEN ORDER_ID IS NULL THEN 1 ELSE 0 END) AS MISSING_ORDERID,
    SUM(CASE WHEN RETURN_STATUS IS NULL THEN 1 ELSE 0 END) AS MISSING_RS,
    SUM(CASE WHEN FORMATTED_ORDER_DATE IS NULL THEN 1 ELSE 0 END) AS MISSING_FORMATTED_ORDER_DATE
FROM FACTSALES;

	
-- 2. CHECK FOR DUPLICATE ROWS

SELECT ROW_ID, COUNT(*) AS DUPLICATE_VALUE
FROM FACTSALES
GROUP BY ROW_ID 
HAVING DUPLICATE_VALUE ;


-- KEEP ONLY ONE ROW PER ROW_ID (REMOVE DUPLICATES)

DELETE FROM FACTSALES
WHERE ROW_ID IN (
    SELECT ROW_ID
    FROM (
        SELECT ROW_ID, 
               ROW_NUMBER() OVER (PARTITION BY ROW_ID ORDER BY ORDER_DATE DESC) AS RN
        FROM FACTSALES
    ) AS T
    WHERE RN > 1
);



-- TOTAL SALES AND PROFIT

SELECT 
  ROUND(
    SUM(SALES), 
    0
  ) AS TOTAL_SALES, 
  ROUND(
    SUM(PROFIT), 
    0
  ) AS TOTAL_PROFIT 
FROM 
  FACTSALES;

-- TOP 10 CUSTOMER BY SALES

SELECT CUSTOMER_NAME AS CUSTOMER_NAME, ROUND(SUM(SALES),2) AS TOTAL_SALES
FROM FACTSALES
GROUP BY CUSTOMER_NAME
ORDER BY TOTAL_SALES DESC
LIMIT 10;


-- SALES DISTRIBUTION BY REGION

SELECT REGION, ROUND(SUM(SALES),2) AS TOTAL_SALES
FROM FACTSALES
GROUP BY REGION
ORDER BY TOTAL_SALES DESC;


-- MOST FREQUENTLY ORDER PRODUCTS
SELECT PRODUCT_NAME, COUNT(*) AS ORDER_COUNT
FROM FACTSALES
GROUP BY PRODUCT_NAME 
ORDER BY ORDER_COUNT DESC
LIMIT 10;

/* RFM SEGMENTATION: 
SEGMENT THE CUSTOMERS BASED ON THEIR RECENCY (R), FREQUENCY (F) & MONETARY (M)
*/

CREATE OR REPLACE VIEW RFM_SCORE_DATA AS
WITH CUSTOMER_AGGREGATED_DATA AS
(SELECT
	CUSTOMER_ID,
    DATEDIFF((SELECT MAX(FORMATTED_ORDER_DATE) FROM FACTSALES), MAX(FORMATTED_ORDER_DATE)) AS RECENCY_VALUE,
    COUNT(DISTINCT ROW_ID) AS FREQUENCY_VALUE,
    ROUND(SUM(SALES),0) AS MONETARY_VALUE
FROM FACTSALES
GROUP BY CUSTOMER_ID),

RFM_SCORE AS
(SELECT 
	C.*,
    NTILE(4) OVER (ORDER BY RECENCY_VALUE DESC) AS R_SCORE,
    NTILE(4) OVER (ORDER BY FREQUENCY_VALUE ASC) AS F_SCORE,
    NTILE(4) OVER (ORDER BY MONETARY_VALUE ASC) AS M_SCORE
FROM CUSTOMER_AGGREGATED_DATA AS C)

SELECT
	R.CUSTOMER_ID,
    R.RECENCY_VALUE,
    R_SCORE,
    R.FREQUENCY_VALUE,
    F_SCORE,
    R.MONETARY_VALUE,
    M_SCORE,
    (R_SCORE + F_SCORE + M_SCORE) AS TOTAL_RFM_SCORE,
    CONCAT_WS('', R_SCORE, F_SCORE, M_SCORE) AS RFM_SCORE_COMBINATION
FROM RFM_SCORE AS R;

-- COMMON TABLE EXPRESSION (CTE)
-- WINDOW FUNCTION (NTILE)
-- VIEW (FUNCTION)

SELECT * FROM RFM_SCORE_DATA WHERE RFM_SCORE_COMBINATION = '111';


SELECT RFM_SCORE_COMBINATION FROM RFM_SCORE_DATA;


CREATE OR REPLACE VIEW RFM_ANALYSIS AS
SELECT 
    RFM_SCORE_DATA.*,
    CASE
        WHEN RFM_SCORE_COMBINATION IN (111, 112, 121, 132, 211, 211, 212, 114, 141) THEN 'CHURNED CUSTOMER'
        WHEN RFM_SCORE_COMBINATION IN (133, 134, 143, 224, 334, 343, 344, 144) THEN 'SLIPPING AWAY, CANNOT LOSE'
        WHEN RFM_SCORE_COMBINATION IN (311, 411, 331) THEN 'NEW CUSTOMERS'
        WHEN RFM_SCORE_COMBINATION IN (222, 231, 221,  223, 233, 322) THEN 'POTENTIAL CHURNERS'
        WHEN RFM_SCORE_COMBINATION IN (323, 333,321, 341, 422, 332, 432) THEN 'ACTIVE'
        WHEN RFM_SCORE_COMBINATION IN (433, 434, 443, 444) THEN 'LOYAL'
    ELSE 'OTHER'
    END AS CUSTOMER_SEGMENT
FROM RFM_SCORE_DATA;


SELECT
	CUSTOMER_SEGMENT,
    COUNT(*) AS NUMBER_OF_CUSTOMERS,
    ROUND(AVG(MONETARY_VALUE),0) AS AVERAGE_MONETARY_VALUE
FROM RFM_ANALYSIS
GROUP BY CUSTOMER_SEGMENT;






























